# ouput
return(c(m, theta_j, theta_err))
}
train <- function(X,w,y){
cost_term <- matrix(NA, nrow = ncol(X), ncol = 3)
for(j in 1:ncol(X)){
cost_term[j,] <- weakLearner(y, X[,j],w)
}
# output the optimal values
j_star <- which.min(cost_term[,3])
theta_star <- cost_term[j_star,2]
m <- cost_term[j_star,1]
pars <- c(j_star, theta_star, m)
return(pars)
}
pars <- train(X,w,y)
classify <- function(X, pars){
y_pred <- ifelse(X[,pars[1]] > pars[2], pars[3], -pars[3])
return(y_pred)
}
label <- classify(X,pars)
agg_class <- function(X, alpha, allPars){
labels <- matrix(0,nrow = nrow(X), ncol = length(B))
for(b in 1:B){
labels[,b] <- classify_sol(X, allPars[b,])
}
labels <- labels %*% alpha
y_hat <- sign(Labels)
return(y_hat)
}
Adaboost <- function(y, X, B){
# define data set
n <- nrow(X)
w <- rep(1/n, n)
allPars <- matrix(NA, nrow = B, ncol = 3)
alpha <- rep(0, B)
for(b in 1:B){
allPars[b,] <- train(X,w,y)
miss <- (y != classify(X, allPars[b,]))
# missclassification error
err <- (w %*% miss/sum(w))[[1]]
# voting weight
alpha[b] <- log( (1-err)/err )
# update weights
w <- w*exp(alpha[b] * miss)
}
return(list(allPars = allPars, alpha = alpha))
}
n <- dim(X)[1]
### train
train <- function(X, w, y){
n <- nrow(X)
p <- ncol(X)
md <- theta <- err <- rep(0, p)
for(j in 1:p){
indx <- order(X[,170])
x_j <- X[indx,170]
w_cum <- cumsum(w[indx] * y[indx])
w_cum[duplicated(x_j) == 1] <- NA
m <- max(abs(w_cum), na.rm = T)
maxIndx <- min(which(abs(w_cum) == m))
mode[j] <- (w_cum[maxIndx] < 0 )*2 -1
theta[j] <- x_j[maxIndx]
c <- ((x_j > theta[j]) *2 -1 ) *mode[j]
err[j] <- w %*% (c != y)
}
m <- min(loss)
j_star <- min(which(err == m))
pars <- list(j = j_star, theta = theta[j_star], md = md[j_star])
return(pars)
}
### classify
classify <- function(X, pars){
label <- (2*(X[,pars_sol$j] > pars_sol$theta) - 1) * pars_sol$md
return(label)
}
### train
train_sol <- function(X, w, y){
n <- nrow(X)
p <- ncol(X)
md <- theta <- err <- rep(0, p)
for(j in 1:p){
indx <- order(X[,170])
x_j <- X[indx,170]
w_cum <- cumsum(w[indx] * y[indx])
w_cum[duplicated(x_j) == 1] <- NA
m <- max(abs(w_cum), na.rm = T)
maxIndx <- min(which(abs(w_cum) == m))
mode[j] <- (w_cum[maxIndx] < 0 )*2 -1
theta[j] <- x_j[maxIndx]
c <- ((x_j > theta[j]) *2 -1 ) *mode[j]
err[j] <- w %*% (c != y)
}
m <- min(loss)
j_star <- min(which(err == m))
pars <- list(j = j_star, theta = theta[j_star], md = md[j_star])
return(pars)
}
### classify
classify_sol <- function(X, pars){
label <- (2*(X[,pars_sol$j] > pars_sol$theta) - 1) * pars_sol$md
return(label)
}
### agg_class
agg_class_sol <- function(X, alpha, allPars){
n <- nrow(X)
B <- length(alpha)
Labels <- matrix(0,nrow = n, ncol = B)
for(b in 1:B){
Labels[,b] <- classify_sol(X, allPars[[b]])
}
Labels <- Labels %*% alpha
c_hat <- sign(Labels)
return(c_hat)
}
adaboost <- function(X,y,B){
n <- dim(X)[1]
w <- rep(1/n,n)
alpha <- rep(0, B)
allPars <- rep(list(list()),B)
for(b in 1:B){
allPars[[b]] <- train_sol(X,w,y)
missclass <- (y != classify_sol(X, allPars[[b]]))
e <- (w %*% missclass/sum(w))[[1]]
alpha[b] <- log((1-e)/e)
w <- w*exp(alpha[b]*missclass)
}
return(list(allPars = allPars, alpha = alpha))
}
n <- dim(X)[1]
B_max <- 60
nCV <- 5
test_err <- matrix(0,nrow=B,ncol=nCV)
train_err <- matrix(0,nrow=B,ncol=nCV)
p <- sample.int(n)
trainIndx <- p[1:round(n/2)]
testIndx <- p[-(1:round(n/2))]
ada <- adaboost(X[trainIndx,], y[trainIndx], B_max)
### train
train_sol <- function(X, w, y){
n <- nrow(X)
p <- ncol(X)
md <- theta <- err <- rep(0, p)
for(j in 1:p){
indx <- order(X[,170])
x_j <- X[indx,170]
w_cum <- cumsum(w[indx] * y[indx])
w_cum[duplicated(x_j) == 1] <- NA
m <- max(abs(w_cum), na.rm = T)
maxIndx <- min(which(abs(w_cum) == m))
mode[j] <- (w_cum[maxIndx] < 0 )*2 -1
theta[j] <- x_j[maxIndx]
c <- ((x_j > theta[j]) *2 -1 ) *mode[j]
err[j] <- w %*% (c != y)
}
m <- min(loss)
j_star <- min(which(err == m))
pars <- list(j = j_star, theta = theta[j_star], md = md[j_star])
return(pars)
}
pars <- train_sol(X,w,y)
pnorm(2.215,0,1)
1-pnorm(2.215,0,1)
1-pf(0.474, 3,15)
pf(0.474, 3,15)
mat <- matrix(c(3,0,0,5),2)
mat
solve(mat)
mat <- matrix(c(3,2,2,5),2)
solve(mat)
mat <- matrix(c(8,15,15,31.5),2)
solve(mat)
det(mat)
mat <- matrix(c(8,15,15,31.25),2)
det(mat)
solve(mat)
install.packages("Hotelling")
mat1 <- matrix(c(72,150,68,145),2)
mat1
mat1 <- matrix(c(72,68,150,145),2)
mat1
mat2 <- matrix(c(69,65,130,120),2)
library(Hotelling)
hotelling.stat(mat1,mat2)
hot <- hotelling.stat(mat1,mat2)
hot <- hotelling.test(mat1,mat2)
View(hot)
pf(92.25,2,1)
1-pf(92.25,2,1)
(1-pf(92.25,2,1))*2
1/pf(92.25,1,2)
1/pf(92.25,2,1)
pf(1/92.25,1,2)
1-pf(92.25,2,1)+pf(1/92.25,1,2)
1-pf(24.8125,2,1)
mat1 <- matrix(c(69,65,150,145),2)
mat2 <- matrix(c(72,68,,130,120),2)
hot <- hotelling.test(mat1,mat2)
mat1 <- matrix(c(72,150,68,145),2, byrow = T)
mat2 <- matrix(c(69,130,65,120),2, byrow = T)
mat1
mat1 <- matrix(c(72,150,68,145),2, byrow = F)
mat2 <- matrix(c(69,130,65,120),2, byrow = F)
mat1
hot$stats
hot$stats[1]
hotelling.test(mat1,mat2)$stats[1]
1-pf(24.8125,2,1)
72,68,
69,65,
150,145
mat1 <- matrix(c(72,150,68,145),2, byrow = T)
mat2 <- matrix(c(69,130,65,120),2, byrow = T)
hotelling.test(mat1,mat2)$stats[1]
mat1 <- matrix(c(72,150,69,130),2, byrow = T)
mat2 <- matrix(c(68,145,65,120),2, byrow = T)
hotelling.test(mat1,mat2)$stats[1]
hotelling.test(mat1,mat2)$stats[1]/4
(hotelling.test(mat1,mat2)$stats[1])/4
as.numeric(hotelling.test(mat1,mat2)$stats[1])/4
mat1 <- matrix(c(72,150,65,120),2, byrow = T)
mat2 <- matrix(c(68,145,69,130),2, byrow = T)
hotelling.test(mat1,mat2)$stats[1]
as.numeric(hotelling.test(mat1,mat2)$stats[1])/4
mat1 <- matrix(c(72,150,65,120),2, byrow = T)
mat2 <- matrix(c(68,145,69,130),2, byrow = T)
hotelling.test(mat1,mat2)$stats[1]
as.numeric(hotelling.test(mat1,mat2)$stats[1])/4
mat1 <- matrix(c(68,145,65,120),2, byrow = T)
mat2 <- matrix(c(69,130,72,150),2, byrow = T)
hotelling.test(mat1,mat2)$stats[1]
as.numeric(hotelling.test(mat1,mat2)$stats[1])/4
d1 <- c(8,15,-2,6)
d2 <- c(7,-4,3,9)
cov(d1,d2)
cbind(d1,d2)
d <- cbind(d1,d2)
cov(d)
var(d1)
mean(d)
apply(d,2,mean)
solve(cov(d))
matrix(apply(d,2,mean))
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
hotelling.stat(d)
mat1 <- matrix(c(72,150,68,145),2, byrow = T)
mat2 <- matrix(c(69,130,65,120),2, byrow = T)
hot <- hotelling.test(mat1,mat2, perm = T)
d1 <- c(-8,15,-2,6)
d2 <- c(-7,-4,3,9)
d <- cbind(d1,d2)
solve(cov(d))
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,-15,-2,6)
d2 <- c(-7,4,3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,-15,2,6)
d2 <- c(-7,4,-3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,-15,2,-6)
d2 <- c(-7,4,-3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,15,2,-6)
d2 <- c(-7,-4,-3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,15,-2,-6)
d2 <- c(-7,-4,3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,15,-2,6)
d2 <- c(-7,-4,3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,15,2,-6)
d2 <- c(7,-4,-3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,15,-2,-6)
d2 <- c(7,-4,3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,15,2,6)
d2 <- c(7,-4,-3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,-15,-2,-6)
d2 <- c(7,4,3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,-15,2,6)
d2 <- c(7,4,-3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(-8,15,-2,6)
d2 <- c(-7,-4,3,9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
d1 <- c(8,-15,2,-6)
d2 <- c(7,4,-3,-9)
d <- cbind(d1,d2)
t(matrix(apply(d,2,mean))) %*% solve(cov(d)) %*% matrix(apply(d,2,mean))
tr <- c(30,67,79, 82, 95,148,170,171,176,193,200,221,243,261,262,263,399,414,446,446,464,777)
1/22
(1/22)*1/21
(1/22)*1/21*1/20
21/22
(21/22)*20/21
20/22
20/22*16/17
20/22*16/17*15/16
20/22*14/17
20/22*14/17*13/14
20/22*14/17*13/14*12/13
20/22*14/17*13/14*12/13*11/12
20/22*14/17*13/14*12/13*11/12*10/11
20/22*14/17*13/14*12/13*11/12*10/11*9/10
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5*3/4
20/22*14/17*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5*3/4*2/3
21/22
21/22*20/21
21/22*20/21*17/18
22-5
21/22*20/21*17/18
21/22*20/21*17/18*16/17
21/22*20/21*17/18*16/17*15/16
21/22*20/21*17/18*16/17*15/16
21/22*20/21*17/18*16/17*15/16*14/15
21/22*20/21*17/18*16/17*15/16*14/15*13/14
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5*3/4
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5*3/4*1/2
21/22*20/21*17/18*16/17*15/16*14/15*13/14*12/13*11/12*10/11*9/10*8/9*7/8*6/7*5/6*4/5*3/4*1/2*0/1
r <- null
r <- rep(0,22)
24/25
23/25
22/25
1/25*23
1/25*22
1/25*21
0.36*7/9
0.36*7/9*6/7
install.packages("survival")
install.packages("survival")
install.packages("survival")
library(survival)
data("ovarian")
table(ovarian$fustat)
ovarian
View(ovarian)
table(ovarian$fustat,ovarian$rx)
survdiff(Surv(futime, fustat) ∼ rx, data = ovarian)
survdiff(Surv(futime, fustat) ~ rx, data = ovarian)
Surv(futime, fustat)
Surv(ovarian$futime, ovarian$fustat)
stat <- c(1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1)
stat <- c(1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1)
crl <- c(57,58,74,79,89,98,101,104,110,118,125,132,154,159,188,203,257,257,431,461,497,723,747,1313,2636)
stat_c <- rep(1,25)
stat_t <- c(1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1)
KM_trt <- survfit(Surv(tr, stat_t) ~ 1, type="kaplan-meier", conf.type="log", )
plot(KM_trt)
km <- survfit(Surv(futime, fustat) ~ rx, data = ovarian, type="kaplan-meier", conf.type="log")
plot(km)
data <- data.frame(data = c(tr, crl), stat = c(stat_t, stat_c), group = c(rep("treatment",22), rep("contol",25)))
KM_trt <- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
KM<- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
plot(KM)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2))
km1 <- survfit(Surv(tr, stat_t) ~ 1, type="kaplan-meier", conf.type="log")
plot(km1)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2))
data <- data.frame(data = c(tr, crl), stat = c(stat_t, stat_c), group = c(rep(1,22), rep(2,25)))
KM<- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2))
KM<- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2),xlab = "time")
legend("topright", lty = c(1,2), legend = c("treatment", "control"))
KM<- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2),xlab = "time", ylab = "percentage")
legend("topright", lty = c(1,2), legend = c("treatment", "control"))
survdiff(Surv(data, stat) ~ group, data = data)
g0 <- c(3.1,6.8,9,9,11.3,16.2,8.7,9,10.1,12.1,18.7,23.1)
status <- c(1,0,1,1,0,1,1,1,0,0,1,0)
example <- data.frame(t = g0, status = status, tx = c(rep(0,6), rep(1,6)))
survdiff(Surv(t, status) ~ tx, data = example)
?survdiff
g0 <- c(3.1,8,9,8,7,9,10.1
status <- c(1,0,1,1,1,0)
g0 <- c(3.1,8,9,8,7,9,10.1)
status <- c(1,0,1,1,1,0)
example <- data.frame(t = g0, status = status, tx = c(rep(0,3), rep(1,3)))
g0 <- c(3.1,8,9,8,7,9,10.1)
status <- c(1,0,1,1,1,0)
example <- data.frame(t = g0, status = status, tx = c(rep(0,3), rep(1,3)))
example <- data.frame(t = g0, status = status, tx = c(rep(0,3), rep(1,3)))
g0 <- c(3.1,8,9,8.7,9,10.1)
status <- c(1,0,1,1,1,0)
example <- data.frame(t = g0, status = status, tx = c(rep(0,3), rep(1,3)))
survdiff(Surv(t, status) ~ tx, data = example)
coxph(formula = Surv(data, stat) ~ group, data = data)
cox.fig <- coxph(formula = Surv(data, stat) ~ group, data = data)
cox.fit <- coxph(formula = Surv(data, stat) ~ group, data = data)
summary(cox.fitx)
summary(cox.fit)
logrank <- survdiff(Surv(data, stat) ~ group, data = data)
summary(logrank)
tr <- c(30,67,79, 82, 95,148,170,171,176,193,200,221,243,261,262,263,399,414,446,446,464,777)
stat_t <- c(1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1)
crl <- c(57,58,74,79,89,98,101,104,110,118,125,132,154,159,188,203,257,257,431,461,497,723,747,1313,2636)
stat_c <- rep(1,25)
data <- data.frame(data = c(tr, crl), stat = c(stat_t, stat_c), group = c(rep(1,22), rep(2,25)))
KM<- survfit(Surv(data, stat) ~ group, type="kaplan-meier", conf.type="log", data = data)
plot(KM, main = "Kaplan-Meier Curve", lty = c(1,2),xlab = "time", ylab = "percentage")
legend("topright", lty = c(1,2), legend = c("treatment", "control"))
survdiff(Surv(data, stat) ~ group, data = data)
cox.fit <- coxph(formula = Surv(data, stat) ~ group, data = data)
summary(cox.fit)
d1 <- c(8,15,-2,6)
d2 <- c(7,-4,3,9)
d <- cbind(d1,d2)
mu <- apply(d,2,mean)
library(Hotelling)
d <- cbind(d1,d2) ;mu <- apply(d,2,mean); cov <- cov(d)
4 %*% t(mu) %*% solve(cov) %*% mi
4 %*% t(mu) %*% solve(cov) %*% mu
t(mu) %*% solve(cov) %*% mu
d1 <- matrix(c(8,15,15,31.5),2)
d1
solve(d1)
(3,22.5) %*%solve(d1)
x <- matrix(3,22.5)
%*%solve(d1)
x
x <- matrix(c(3,22.5))
x
t(x)%*%solve(d1) %*%x
d1 <- matrix(c(8,15,15,31.25),2)
t(x)%*%solve(d1) %*%x
solve(d1)
tr <- matrix(c(50,5,60,4),2)
tr
tr <- matrix(c(50,60,5,4),2)
tr
tr1 <- matrix(c(50,60,5,4),2)
tr2 <- matrix(30,34,40,7,8,6)
tr2 <- matrix(c(30,34,40,7,8,6),2)
tr2
tr2 <- matrix(c(30,34,40,7,8,6),3)
tr2
tr1_mean <- apply(tr1,2,mean)
tr2_mean <- apply(tr2,2,mean)
C1 <- cov(tr1)
C2 <- cov(tr2)
library(Hotelling)
hotelling.stat(tr1,tr2)
hot <- hotelling.stat(tr1,tr2)
hot$statistic
hot <- hotelling.test(tr1,tr2)
tr1_mean-tr2_mean
(1*C1 + 2*C2)/(2+3-2)
solve((1*C1 + 2*C2)/(2+3-2))
trt <- data.frame(times = c(30,67,79), cens = c(1,1,0))
crt <- data.frame(times = c(57,58,74), cens = c(1,1,1))
library(survival)
bdc <- rbind(trt, crt)
bdc$group <- as.factor(c(rep("T",3), rep("C", 3)))
cox <- coxph(Surv(times, event = cens)~ group, data = bdc)
summary(coxph)
summary(cox)
trt <- data.frame(times = c(30,67), cens = c(1,0))
crt <- data.frame(times = c(57,58), cens = c(1,1))
library(survival)
bdc <- rbind(trt, crt)
bdc$group <- as.factor(c(rep("T",2), rep("C", 2)))
cox <- coxph(Surv(times, event = cens)~ group, data = bdc)
summary(cox)
log(2+3)
log(2)*log(3)
# load the packages
library(tm)
library(dplyr)
library(tidytext)
library(kernlab)
library(LaplacesDemon)
busi_location <- "../data/bbc/business/"
entertain_location <- "../data/bbc/entertainment/"
politics_location <- "../data/bbc/politics/"
sport_location <- "../data/bbc/sport/"
tech_location <- "../data/bbc/tech/"
source("../lib/functions.R")
file <- list.files(busi_location)[1:5] %>% lapply(., read_txt, busi_location) #%>% extract.features()
f1 <- file[[1]]
list.files(busi_location)[1]
f11 <- list.files(busi_location)[1] %>% readline()
